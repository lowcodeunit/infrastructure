jobs:
  build:
    # Build And Publish
    name: Build and Publish
    runs-on: ubuntu-latest
    steps:
      # checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      # set variables
      - name: Set variables
        id: vars
        run: |
          echo ::set-output name=branchName::${GITHUB_REF##*/}
          
          if ['$BRANCH' == '$MAIN_BRANCH']
          then
              echo "::set-output name=versionBump::minor"
          else
              echo "::set-output name=versionBump::patch"
          fi
        env:
          BRANCH: ${{ steps.vars.outputs.branchName }}
          MAIN_BRANCH: ${{ env.MainBranch }}
      - run: echo "Current branch is ${{ steps.vars.outputs.branchName }}"
      - run: echo "Version bump type is ${{ steps.vars.outputs.versionBump }}"

      # bump version and push tag
      - name: Bump version and push tag
        uses: anothrNick/github-tag-action@1.26.0
        id: versionBump
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BRANCHES: ${{ steps.vars.outputs.branchName }}
          DEFAULT_BUMP: ${{ steps.vars.outputs.versionBump }}
          WITH_V: false

      - name: Echo current version
        run: echo "The new version is ${{ steps.versionBump.outputs.new_tag }}"

      # replace text in package.json for main branch
      - name: replace version text for main branch
        if: ${{ steps.vars.outputs.branchName == env.MainBranch }}
        shell: pwsh
        run: (Get-Content -path package.json -Raw) -replace "version patch","version ${{ steps.versionBump.outputs.new_tag }} --no-git-tag-version -f" | Set-Content -Path package.json

      # replace text in package.json for dev branches
      - name: replace tag text for dev branches
        if: ${{ steps.vars.outputs.branchName != env.MainBranch }}
        shell: pwsh
        run: (Get-Content -path package.json -Raw) -replace "--access public","--access public --tag ${{ steps.vars.outputs.branchName }}" | Set-Content -Path package.json

      - name: replace version text for dev branches
        if: ${{ steps.vars.outputs.branchName != env.MainBranch }}
        shell: pwsh
        run: (Get-Content -path package.json -Raw) -replace "version patch","version ${{ steps.versionBump.outputs.new_tag }}-${{ steps.vars.outputs.branchName }} --no-git-tag-version -f" | Set-Content -Path package.json

      # run npm commands
      - uses: actions/setup-node@v2
        with:
          node-version: 12
          registry-url: ${{ env.NPMRegistry }}

      # install npm dependencies from package-lock.json
      - name: npm install
        run: ${{ env.InstallCommand }}

      # build & publish npm packages to npmjs.org
      - name: npm build & publish
        if: ${{ steps.versionBump.outputs.new_tag != '' }}
        run: ${{ env.DeployCommand }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
